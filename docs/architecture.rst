
구조
====


서브시스템
----------

* 전체 시스템은 다음과 같은 서브시스템으로 이루어진다.

  * 실시간 시장정보 서브시스템
  * 전략실행 서브시스템
  * 증권사 게이트웨이 서브시스템
  * 사용자 인터페이스 서브시스템

* 각 시스템은 별도의 하드웨어에서 동작할 수 있어야 한다.
* 각 시스템은 목적에 맞게 다른 언어와 플랫폼에서 구현할 수 있다.
* 각 시스템은 미들웨어를 통해 통신한다.
  

실시간 시장정보 서브시스템
^^^^^^^^^^^^^^^^^^^^^^^^^^

* 거래소(코스콤) 또는 증권사로부터 나오는 시세 등의 실시간 시장정보를 미리 정한 포맷으로 변형한다.
* 변형된 실시간 시장정보를 전략실행 서브시스템으로 배분한다.
* 변형된 실시간 시장정보를 데이터베이스에 저장한다.
* 실시간 시장정보 질의 응답에 답하여 시장정보를 반환한다.
* 복수의 거래소 또는 증권사 또는 시장정보 제공자가 있을 경우 복수의 실시간 시장정보 서브시스템이 있을 수 있다.


전략실행 서브시스템
^^^^^^^^^^^^^^^^^^^

* 실시간 시장정보 서브시스템으로부터 실시간 시장정보와 증권사 게이트웨이로부터 오는 매매관련 이벤트 정보를 받고 이에 기반하여 매매지시를 내린다.
* 매매지시를 증권사 게이트웨이 서브시스템에 보내고 응답/거부/체결 등의 매매관련 이벤트 정보를 받는다.
* 하나의 전략실행 서브시스템은 한 종류의 전략을 실행할 수 있다. 따라서 복수의 전략이 있을 경우 그 갯수만큼 복수의 전략실행 서브시스템이 존재한다. 
* 전략에 종목, 수량, 시간 및 기타 전략에 따른 인수를 지정할 수 있으며 전략과 인수가 결합된 것을 메타주문(Meta-Order)라고 한다. 하나의 전략실행 서브시스템은 복수의 메타주문을 동시에 실행할 수 있다.
* 하나의 전략은 복수의 계좌 및 증권사를 사용할 수 있어야 한다.
* 하나의 전략은 복수의 종목에 대한 매매를 실행할 수 있어야 한다.   
* 매매지시 및 매매 이벤트는 실시간으로 데이터베이스나 파일시스템에 기록되어야 한다.
* 전략실행 서브시스템의 상태정보는 실시간으로 데이터베이스에 기록되어야 한다. 
  

증권사 게이트웨이 서브시스템
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* 증권사 게이트웨이 서브시스템은 전략실행 서브시스템으로부터 받은 매매지시를 증권사에 보내고 그 결과로 나오는 각종 응답/거부/체결 등의 매매관련 이벤트를 다시 전략실행 서브시스템으로 전달한다.
* 복수의 증권사가 있으므로 복수의 증권사 게이트웨이 서브시스템이 있어야 한다.
* 게이트웨이 서브시스템은 추후 해외 증권거래 및 기관 증권거래에 확장할 수 있도록 FIX 프로토콜 혹은 그와 대응하는 프로토콜을 기반으로 동작해야 한다.
* 개인고객의 계좌 정보를 조회할 수 있어야 한다.
* 개인고객/법인고객의 주문 기록과 주문 현황을 조회할 수 있어야 한다.
  

사용자 인터페이스 서브시스템
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* 다른 서브시스템의 상태정보 및 기록을 사용자가 볼 수 있도록 제공한다.
* 사용자가 메타주문을 만들고 전략실행 서브시스템에 제출할 수 있어야 한다.
* 웹으로 구현할 수 있도록 REST API를 제공해야 한다.


  
서브시스템간의 통신
-------------------

* 서브시스템간의 통신은 메시지 기반 미들웨어를 사용한다.
* 각 서브시스템의 종류 혹은 아이디를 채널 정보 혹은 헤더로 가지는 Publish/Subscribe 방식의 비동기 통신을 사용한다.
* 전달되는 메세지는 미리 지정한 방법에 따라 표준화 또는 암호화/직렬화가 된 문자열 정보이다.

  * 실시간 시장정보는 comma로 구분되는 필드를 가진 문자열을 사용한다.
  * 매매지시 및 이벤트는 보호를 위해 암호화되고 직렬화된 문자열을 사용한다.
    
* 전달하려는 정보의 특성에 따라 다른 종류의 미들웨어를 같이 사용할 수 있다.

  * 실시간 시장정보는 속도가 빠른 ZeroMQ를 사용한다.
  * 매매지시 및 이벤트는 신뢰성이 높은 RabbitMQ를 사용한다.




